{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"CountryDTO": {
				"properties": {
					"alpha2Code": {
						"type": "string"
					},
					"alpha3Code": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"subregion": {
						"type": "string",
						"nullable": true
					},
					"commonName": {
						"type": "string"
					},
					"officialName": {
						"type": "string"
					}
				},
				"required": [
					"alpha2Code",
					"alpha3Code",
					"region",
					"subregion",
					"commonName",
					"officialName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HttpStatusCodeLiteral": {
				"type": "number",
				"enum": [
					100,
					101,
					102,
					200,
					201,
					202,
					203,
					204,
					205,
					206,
					207,
					208,
					226,
					300,
					301,
					302,
					303,
					304,
					305,
					307,
					308,
					400,
					401,
					402,
					403,
					404,
					405,
					406,
					407,
					408,
					409,
					410,
					411,
					412,
					413,
					414,
					415,
					416,
					417,
					418,
					422,
					423,
					424,
					426,
					428,
					429,
					431,
					451,
					500,
					501,
					502,
					503,
					504,
					505,
					506,
					507,
					508,
					510,
					511
				]
			},
			"JsonApiError": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/HttpStatusCodeLiteral",
						"description": "HTTP Status code of the response."
					},
					"code": {
						"type": "string",
						"description": "An application-specific error code, expressed as a string value"
					},
					"title": {
						"type": "string",
						"description": "The error title"
					},
					"detail": {
						"type": "string",
						"description": "A human-readable explanation of the problem"
					}
				},
				"required": [
					"status",
					"code",
					"title"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PageMetadata": {
				"properties": {
					"pageSize": {
						"type": "number",
						"format": "double"
					},
					"totalElements": {
						"type": "number",
						"format": "double"
					},
					"currentPage": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"pageSize",
					"totalElements",
					"currentPage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TyreManufacturers.Exclude_keyofTyreManufacturers.countryId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"primaryColor": {
						"type": "string"
					},
					"secondaryColor": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"primaryColor",
					"secondaryColor"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"TyreManufacturerDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"primaryColor": {
						"type": "string"
					},
					"secondaryColor": {
						"type": "string"
					},
					"country": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"primaryColor",
					"secondaryColor",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PageQueryParams": {
				"description": "Query params to be passed to the paginated routes in the controllers. They are optional for the user, the pagination will be created with default params when required",
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Companies.Exclude_keyofCompanies.countryId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"founder": {
						"type": "string"
					},
					"yearFounded": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"founder",
					"yearFounded"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"CompanyDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"founder": {
						"type": "string"
					},
					"yearFounded": {
						"type": "number",
						"format": "double"
					},
					"country": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"founder",
					"yearFounded",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CompanyQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"name": {
						"type": "string",
						"description": "Return only the companies that has manufactured in this specialty"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Gender": {
				"type": "string",
				"enum": [
					"MALE",
					"FEMALE"
				]
			},
			"Pick_Drivers.Exclude_keyofDrivers.driverOmittedAttr__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"abbreviation": {
						"type": "string"
					},
					"permanentNumber": {
						"type": "string"
					},
					"gender": {
						"$ref": "#/components/schemas/Gender"
					},
					"dateOfBirth": {
						"type": "string"
					},
					"dateOfDeath": {
						"type": "string"
					},
					"placeOfBirth": {
						"type": "string"
					},
					"photo": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"firstName",
					"lastName",
					"abbreviation",
					"permanentNumber",
					"gender",
					"dateOfBirth",
					"dateOfDeath",
					"placeOfBirth",
					"photo"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"DriverDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"abbreviation": {
						"type": "string"
					},
					"permanentNumber": {
						"type": "string"
					},
					"gender": {
						"$ref": "#/components/schemas/Gender"
					},
					"dateOfBirth": {
						"type": "string"
					},
					"dateOfDeath": {
						"type": "string"
					},
					"placeOfBirth": {
						"type": "string"
					},
					"photo": {
						"type": "string"
					},
					"countryOfBirthCountry": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					},
					"nationalityCountry": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					},
					"secondNationalityCountry": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"firstName",
					"lastName",
					"abbreviation",
					"permanentNumber",
					"gender",
					"dateOfBirth",
					"dateOfDeath",
					"placeOfBirth",
					"photo",
					"countryOfBirthCountry",
					"nationalityCountry",
					"secondNationalityCountry"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DriverQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"name": {
						"type": "string",
						"description": "If specified, returns only drivers whose full name contains this value"
					},
					"nationalityId": {
						"type": "string",
						"description": "If specified, returns only drivers of this nationality"
					},
					"birthBefore": {
						"type": "string",
						"description": "If specified, return only the drivers whose birth is before this value.\r\nThe param value should have the format `YYYY-MM-DD`",
						"example": "1972-03-23",
						"pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
					},
					"birthAfter": {
						"type": "string",
						"description": "If specified, return only the drivers whose birth is after this value.\r\nThe param value should have the format `YYYY-MM-DD`",
						"example": "1972-03-23",
						"pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
					},
					"gender": {
						"$ref": "#/components/schemas/Gender",
						"description": "If specified, returns only drivers of this gender"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_SeasonEntrants.Exclude_keyofSeasonEntrants.countryId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"season": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"name",
					"season"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"SeasonEntrantDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"country": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"season",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_EventEntrants.Exclude_keyofEventEntrants.EventEntrantOmittedAttr__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"driverNumber": {
						"type": "number",
						"format": "double"
					},
					"entrantName": {
						"type": "string"
					},
					"chassisName": {
						"type": "string"
					},
					"engineName": {
						"type": "string"
					},
					"note": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"driverNumber",
					"entrantName",
					"chassisName",
					"engineName",
					"note"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"EventEntrantDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"driverNumber": {
						"type": "number",
						"format": "double"
					},
					"entrantName": {
						"type": "string"
					},
					"chassisName": {
						"type": "string"
					},
					"engineName": {
						"type": "string"
					},
					"note": {
						"type": "string"
					},
					"driver": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DriverDTO"
							}
						],
						"nullable": true
					},
					"seasonEntrant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SeasonEntrantDTO"
							}
						],
						"nullable": true
					},
					"tyreManufacturer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TyreManufacturerDTO"
							}
						],
						"nullable": true
					},
					"chassisManufacturer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CompanyDTO"
							}
						],
						"nullable": true
					},
					"engineManufacturer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CompanyDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"driverNumber",
					"entrantName",
					"chassisName",
					"engineName",
					"note",
					"driver",
					"seasonEntrant",
					"tyreManufacturer",
					"chassisManufacturer",
					"engineManufacturer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_SessionEntrantQueryParams.Exclude_keyofSessionEntrantQueryParams.round-or-session__": {
				"properties": {
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"EntrantQueryParam": {
				"properties": {
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Circuits.Exclude_keyofCircuits.countryId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"previousNames": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"RACE",
							"ROAD",
							"STREET"
						]
					},
					"placeName": {
						"type": "string"
					},
					"latitude": {
						"type": "string"
					},
					"longitude": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"previousNames",
					"type",
					"placeName",
					"latitude",
					"longitude"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"CircuitDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"previousNames": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"RACE",
							"ROAD",
							"STREET"
						]
					},
					"placeName": {
						"type": "string"
					},
					"latitude": {
						"type": "string"
					},
					"longitude": {
						"type": "string"
					},
					"country": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"previousNames",
					"type",
					"placeName",
					"latitude",
					"longitude",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CircuitQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GrandsPrix": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"shortName": {
						"type": "string"
					},
					"countryId": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"shortName",
					"countryId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Events.Exclude_keyofEvents.grandPrixId-or-circuitId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"qualyFormat": {
						"type": "string"
					},
					"scheduledLaps": {
						"type": "number",
						"format": "double"
					},
					"posterURL": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"qualyFormat",
					"scheduledLaps",
					"posterURL"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"EventDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"qualyFormat": {
						"type": "string"
					},
					"scheduledLaps": {
						"type": "number",
						"format": "double"
					},
					"posterURL": {
						"type": "string"
					},
					"grandPrix": {
						"allOf": [
							{
								"$ref": "#/components/schemas/GrandsPrix"
							}
						],
						"nullable": true
					},
					"circuit": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CircuitDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"qualyFormat",
					"scheduledLaps",
					"posterURL",
					"grandPrix",
					"circuit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EventQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"circuitId": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IncludeQueryParam": {
				"description": "Interface to define the optional `include` query parameter according to JSON API specifications.\r\nThe `include` parameter allows clients to request related resources be included in the response.",
				"properties": {
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TimedSessionResults.Exclude_keyofTimedSessionResults.sessionId-or-entrantId__": {
				"properties": {
					"positionOrder": {
						"type": "number",
						"format": "double"
					},
					"positionText": {
						"type": "string"
					},
					"time": {
						"type": "number",
						"format": "double"
					},
					"laps": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"positionOrder",
					"positionText",
					"time",
					"laps"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"TimedSessionResultsDTO": {
				"properties": {
					"positionOrder": {
						"type": "number",
						"format": "double"
					},
					"positionText": {
						"type": "string"
					},
					"time": {
						"type": "number",
						"format": "double"
					},
					"laps": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventDTO"
							}
						],
						"nullable": true
					},
					"entrant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventEntrantDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"positionOrder",
					"positionText",
					"time",
					"laps",
					"session",
					"entrant"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TimedSessionResultQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"round": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"type": "string"
					},
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"minPos": {
						"type": "integer",
						"format": "int32",
						"description": "Look for the results where the driver achieved a position worse than or equal to this number.",
						"minimum": 1
					},
					"maxPos": {
						"type": "integer",
						"format": "int32",
						"description": "Look for the results where the driver achieved a position better than or equal to this number.",
						"minimum": 1
					},
					"positionText": {
						"type": "string",
						"description": "Filter by a specific postion text, that can be `1`, `2`, `3`... or `DNF`, `DNS`..."
					},
					"orderBy": {
						"type": "string",
						"enum": [
							"entrantId",
							"sessionId",
							"positionOrder",
							"positionText",
							"time",
							"laps"
						],
						"nullable": false,
						"default": "sessionId"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_RaceResults.Exclude_keyofRaceResults.sessionId-or-entrantId__": {
				"properties": {
					"points": {
						"type": "number",
						"format": "double"
					},
					"positionOrder": {
						"type": "number",
						"format": "double"
					},
					"positionText": {
						"type": "string"
					},
					"time": {
						"type": "number",
						"format": "double"
					},
					"gridPosition": {
						"type": "number",
						"format": "double"
					},
					"gridPenalty": {
						"type": "string"
					},
					"laps": {
						"type": "number",
						"format": "double"
					},
					"pointsCountForWDC": {
						"type": "number",
						"format": "double"
					},
					"pointsGained": {
						"type": "number",
						"format": "double"
					},
					"timePenalty": {
						"type": "number",
						"format": "double"
					},
					"reasonRetired": {
						"type": "string"
					}
				},
				"required": [
					"points",
					"positionOrder",
					"positionText",
					"time",
					"gridPosition",
					"gridPenalty",
					"laps",
					"pointsCountForWDC",
					"pointsGained",
					"timePenalty",
					"reasonRetired"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"RaceResultDTO": {
				"properties": {
					"points": {
						"type": "number",
						"format": "double"
					},
					"positionOrder": {
						"type": "number",
						"format": "double"
					},
					"positionText": {
						"type": "string"
					},
					"time": {
						"type": "number",
						"format": "double"
					},
					"gridPosition": {
						"type": "number",
						"format": "double"
					},
					"gridPenalty": {
						"type": "string"
					},
					"laps": {
						"type": "number",
						"format": "double"
					},
					"pointsCountForWDC": {
						"type": "number",
						"format": "double"
					},
					"pointsGained": {
						"type": "number",
						"format": "double"
					},
					"timePenalty": {
						"type": "number",
						"format": "double"
					},
					"reasonRetired": {
						"type": "string"
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventDTO"
							}
						],
						"nullable": true
					},
					"entrant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventEntrantDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"points",
					"positionOrder",
					"positionText",
					"time",
					"gridPosition",
					"gridPenalty",
					"laps",
					"pointsCountForWDC",
					"pointsGained",
					"timePenalty",
					"reasonRetired",
					"session",
					"entrant"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RaceResultQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"round": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"type": "string"
					},
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"minPos": {
						"type": "integer",
						"format": "int32",
						"description": "Look for the results where the driver achieved a position worse than or equal to this number.",
						"minimum": 1
					},
					"maxPos": {
						"type": "integer",
						"format": "int32",
						"description": "Look for the results where the driver achieved a position better than or equal to this number.",
						"minimum": 1
					},
					"positionText": {
						"type": "string",
						"description": "Filter by a specific postion text, that can be `1`, `2`, `3`... or `DNF`, `DNS`..."
					},
					"maxGridPos": {
						"type": "number",
						"format": "double"
					},
					"minGridPos": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Sessions.Exclude_keyofSessions.eventId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"abbreviation": {
						"type": "string"
					},
					"startDateTime": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"abbreviation",
					"startDateTime"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"SessionDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"abbreviation": {
						"type": "string"
					},
					"startDateTime": {
						"type": "string"
					},
					"event": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"abbreviation",
					"startDateTime",
					"event"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_LapTimes.Exclude_keyofLapTimes.sessionId-or-entrantId__": {
				"properties": {
					"time": {
						"type": "number",
						"format": "double"
					},
					"lap": {
						"type": "number",
						"format": "double"
					},
					"pos": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"time",
					"lap",
					"pos"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"LapTimeDTO": {
				"properties": {
					"time": {
						"type": "number",
						"format": "double"
					},
					"lap": {
						"type": "number",
						"format": "double"
					},
					"pos": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SessionDTO"
							}
						],
						"nullable": true
					},
					"entrant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventEntrantDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"time",
					"lap",
					"pos",
					"session",
					"entrant"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LapQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"round": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"type": "string"
					},
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"pos": {
						"type": "number",
						"format": "double"
					},
					"lap": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_PitStops.Exclude_keyofPitStops.sessionId-or-entrantId__": {
				"properties": {
					"time": {
						"type": "number",
						"format": "double"
					},
					"lap": {
						"type": "number",
						"format": "double"
					},
					"timeOfDay": {
						"type": "string"
					},
					"annotation": {
						"type": "string"
					}
				},
				"required": [
					"time",
					"lap",
					"timeOfDay",
					"annotation"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"PitStopDTO": {
				"properties": {
					"time": {
						"type": "number",
						"format": "double"
					},
					"lap": {
						"type": "number",
						"format": "double"
					},
					"timeOfDay": {
						"type": "string"
					},
					"annotation": {
						"type": "string"
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SessionDTO"
							}
						],
						"nullable": true
					},
					"entrant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EventEntrantDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"time",
					"lap",
					"timeOfDay",
					"annotation",
					"session",
					"entrant"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PitStopQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"sort": {
						"type": "string",
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`"
					},
					"include": {
						"type": "string",
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`"
					},
					"season": {
						"type": "number",
						"format": "double"
					},
					"round": {
						"type": "number",
						"format": "double"
					},
					"session": {
						"type": "string"
					},
					"driverId": {
						"type": "string",
						"description": "Return only the items regarding this driver"
					},
					"lap": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_GrandsPrix.Exclude_keyofGrandsPrix.countryId__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"shortName": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"shortName"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"GrandsPrixDTO": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"shortName": {
						"type": "string"
					},
					"country": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CountryDTO"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"fullName",
					"shortName",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GrandPrixQueryParams": {
				"properties": {
					"pageNo": {
						"type": "integer",
						"format": "int32",
						"description": "Page to retrieve, starting at 0",
						"default": 0,
						"minimum": 0
					},
					"pageSize": {
						"type": "integer",
						"format": "int32",
						"description": "Size of the page to retrieve",
						"default": 10,
						"minimum": 1
					},
					"name": {
						"type": "string",
						"description": "Filter drivers by its full name"
					},
					"countryId": {
						"type": "string",
						"description": "Filter drivers by its nationality"
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "backend-f1",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/countries": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CountryDTO"
									},
									"type": "array"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get countries based on some optional filters. The results will be returned paginated",
				"tags": [
					"Countries"
				],
				"security": [],
				"parameters": []
			}
		},
		"/countries/{countryId}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CountryDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a country by its ID",
				"tags": [
					"Countries"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the country to get",
						"in": "path",
						"name": "countryId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tyre-manufacturers": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/TyreManufacturerDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Tyre Manufacturers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					}
				]
			}
		},
		"/tyre-manufacturers/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TyreManufacturerDTO"
								}
							}
						}
					}
				},
				"description": "Get a company by its ID",
				"tags": [
					"Tyre Manufacturers"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/companies": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/CompanyDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get companies based on some optional filters. The results will be returned paginated",
				"tags": [
					"Companies"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the companies that has manufactured in this specialty",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/companies/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CompanyDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a company by its ID",
				"tags": [
					"Companies"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/championships/{season}/drivers": {
			"get": {
				"operationId": "GetDriverChampionshipResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"totalPoints": {
												"type": "number",
												"format": "double"
											},
											"points": {
												"type": "number",
												"format": "double"
											},
											"driver": {
												"$ref": "#/components/schemas/DriverDTO"
											},
											"position": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"totalPoints",
											"points",
											"driver",
											"position"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the driver's world championship results for the specified season",
				"tags": [
					"Championships"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "If specified, the result obtained will be the championship situation immediately after that round.",
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/championships/{season}/drivers/{driverId}": {
			"get": {
				"operationId": "GetDriverChampionshipResult",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"totalPoints": {
											"type": "number",
											"format": "double"
										},
										"points": {
											"type": "number",
											"format": "double"
										},
										"driver": {
											"$ref": "#/components/schemas/DriverDTO"
										},
										"position": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"totalPoints",
										"points",
										"driver",
										"position"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get the driver's world championship result for a specified season and driver",
				"tags": [
					"Championships"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If specified, the result obtained will be the championship situation of the driver immediately after that round.",
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/drivers": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/DriverDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get drivers based on some optional filters. The results will be returned paginated",
				"tags": [
					"Drivers"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If specified, returns only drivers whose full name contains this value",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If specified, returns only drivers of this nationality",
						"in": "query",
						"name": "nationalityId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If specified, return only the drivers whose birth is before this value.\r\nThe param value should have the format `YYYY-MM-DD`",
						"in": "query",
						"name": "birthBefore",
						"required": false,
						"schema": {
							"type": "string",
							"pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
						},
						"example": "1972-03-23"
					},
					{
						"description": "If specified, return only the drivers whose birth is after this value.\r\nThe param value should have the format `YYYY-MM-DD`",
						"in": "query",
						"name": "birthAfter",
						"required": false,
						"schema": {
							"type": "string",
							"pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}"
						},
						"example": "1972-03-23"
					},
					{
						"description": "If specified, returns only drivers of this gender",
						"in": "query",
						"name": "gender",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Gender"
						}
					}
				]
			}
		},
		"/drivers/{driverId}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DriverDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a driver by its ID",
				"tags": [
					"Drivers"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the driver to get",
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/drivers/{driverId}/relationships": {
			"get": {
				"operationId": "GetDriverFamilyRelationships",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"relationship": {
												"type": "string"
											},
											"driver": {
												"$ref": "#/components/schemas/DriverDTO"
											}
										},
										"required": [
											"relationship",
											"driver"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the family relationship of a driver",
				"tags": [
					"Drivers"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the driver to get its relationship",
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/drivers/{driverId}/seasons": {
			"get": {
				"operationId": "GetDriverSeasons",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "number",
										"format": "double"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the seasons where a specific driver has participated in at least one race or event",
				"tags": [
					"Drivers"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the driver to get",
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/drivers/{driverId}/championship-results": {
			"get": {
				"operationId": "GetChampionshipResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"results": {
											"items": {
												"properties": {
													"points": {
														"type": "number",
														"format": "double"
													},
													"position": {
														"type": "number",
														"format": "double"
													},
													"season": {
														"type": "number",
														"format": "double"
													}
												},
												"required": [
													"points",
													"position",
													"season"
												],
												"type": "object"
											},
											"type": "array"
										},
										"driver": {
											"$ref": "#/components/schemas/DriverDTO"
										}
									},
									"required": [
										"results",
										"driver"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get WDC results of this driver",
				"tags": [
					"Drivers"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/session-entrants": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/EventEntrantDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get entrants based on some filters. The return data will be paginated",
				"tags": [
					"Session entrants"
				],
				"security": [],
				"parameters": [
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/circuits": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/CircuitDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get circuits based on some optional filters. The results will be returned paginated",
				"tags": [
					"Circuits"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/circuits/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CircuitDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a circuit by its ID",
				"tags": [
					"Circuits"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the circuit to get",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/events": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/EventDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get events based on some optional filters. The results will be returned paginated",
				"tags": [
					"Events"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "circuitId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/events/{season}/{round}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a event by its season and its round",
				"tags": [
					"Events"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/free-practices": {
			"get": {
				"operationId": "GetFreePracticesResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/TimedSessionResultsDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get driver race results based on some filters",
				"tags": [
					"Free Practices"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Look for the results where the driver achieved a position worse than or equal to this number.",
						"in": "query",
						"name": "minPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Look for the results where the driver achieved a position better than or equal to this number.",
						"in": "query",
						"name": "maxPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Filter by a specific postion text, that can be `1`, `2`, `3`... or `DNF`, `DNS`...",
						"in": "query",
						"name": "positionText",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "orderBy",
						"required": false,
						"schema": {
							"default": "sessionId",
							"type": "string",
							"enum": [
								"entrantId",
								"sessionId",
								"positionOrder",
								"positionText",
								"time",
								"laps"
							]
						}
					}
				]
			}
		},
		"/free-practices/{season}/{round}/{session}": {
			"get": {
				"operationId": "GetFreePracticeSessionResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TimedSessionResultsDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets info about the results of a certain free practice",
				"tags": [
					"Free Practices"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/free-practices/{season}/{round}/{session}/{driverId}": {
			"get": {
				"operationId": "GetDriverFreePracticeResult",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TimedSessionResultsDTO"
								}
							}
						}
					}
				},
				"description": "Gets info about the result obtained by a driver in a certain free practice",
				"tags": [
					"Free Practices"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/qualifyings": {
			"get": {
				"operationId": "GetQualifyingsResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/TimedSessionResultsDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get driver race results based on some filters",
				"tags": [
					"Qualifyings"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Look for the results where the driver achieved a position worse than or equal to this number.",
						"in": "query",
						"name": "minPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Look for the results where the driver achieved a position better than or equal to this number.",
						"in": "query",
						"name": "maxPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Filter by a specific postion text, that can be `1`, `2`, `3`... or `DNF`, `DNS`...",
						"in": "query",
						"name": "positionText",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "orderBy",
						"required": false,
						"schema": {
							"default": "sessionId",
							"type": "string",
							"enum": [
								"entrantId",
								"sessionId",
								"positionOrder",
								"positionText",
								"time",
								"laps"
							]
						}
					}
				]
			}
		},
		"/qualifyings/{season}/{round}/{session}": {
			"get": {
				"operationId": "GetQualifyingSessionResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TimedSessionResultsDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets info about the results of a certain free practice",
				"tags": [
					"Qualifyings"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/qualifyings/{season}/{round}/{session}/{driverId}": {
			"get": {
				"operationId": "GetDriverQualifyingResult",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TimedSessionResultsDTO"
								}
							}
						}
					}
				},
				"description": "Gets info about the result obtained by a driver in a certain free practice",
				"tags": [
					"Qualifyings"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/races/results": {
			"get": {
				"operationId": "GetRacesResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/RaceResultDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get driver race results based on some filters",
				"tags": [
					"Races"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Look for the results where the driver achieved a position worse than or equal to this number.",
						"in": "query",
						"name": "minPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Look for the results where the driver achieved a position better than or equal to this number.",
						"in": "query",
						"name": "maxPos",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Filter by a specific postion text, that can be `1`, `2`, `3`... or `DNF`, `DNS`...",
						"in": "query",
						"name": "positionText",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "maxGridPos",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "minGridPos",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/races/results/{season}/{round}/{session}": {
			"get": {
				"operationId": "GetRaceResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RaceResultDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets info about the results of a certain race",
				"tags": [
					"Races"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/races/results/{season}/{round}/{session}/{driverId}": {
			"get": {
				"operationId": "GetDriverRaceResult",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RaceResultDTO"
								}
							}
						}
					}
				},
				"description": "Gets info about the result obtained by a driver in a certain race",
				"tags": [
					"Races"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "driverId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/laps": {
			"get": {
				"operationId": "GetLaps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/LapTimeDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get lap times based on some optional filters. The results will be returned paginated",
				"tags": [
					"Laps"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pos",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "lap",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/laps/fastest": {
			"get": {
				"operationId": "GetFastestLaps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/LapTimeDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get the fastest lap times grouped by session, based on some filters.\r\n\r\nPlease take into account that this call return only the global fastest laps inside a session. For example if we filter here by the driver Fernando Alonso, we will get only the sessions where he score the fastest lap",
				"tags": [
					"Laps"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pos",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "lap",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/pit-stops": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/PitStopDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get pit stops based on some optional filters. The results will be returned paginated",
				"tags": [
					"Pit Stops"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Comma-separated list of fields/directions used to sort the primary resource's collection.\r\nEach item in the list represents a field to sort by, with an optional `-` prefix for descending order (the default behavior is ascending).\r\n\r\n#### Examples:\r\n- To sort by 'created_at' in ascending order: `sort=created_at`\r\n- To sort by 'name' in descending order: `sort=-name`\r\n- To sort by multiple fields: `sort=created_at,-name`",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "season",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "round",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "session",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Return only the items regarding this driver",
						"in": "query",
						"name": "driverId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "lap",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}": {
			"get": {
				"operationId": "GetByEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SessionDTO"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get a the sessions of a round or event",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}/{session}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionDTO"
								}
							}
						}
					}
				},
				"description": "Get a session",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}/{session}/results": {
			"get": {
				"operationId": "GetSessionResults",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"anyOf": [
											{
												"$ref": "#/components/schemas/TimedSessionResultsDTO"
											},
											{
												"$ref": "#/components/schemas/RaceResultDTO"
											}
										]
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the results of a session session",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A comma-separated string specifying the related resources or fields to include in the response.\r\nIf a relationship attribute is an object or has nested attributes, you can use dot notation to specify the attributes to include for that object.\r\n\r\n#### Examples:\r\n- To include the author and comments for a post: `include=author,comments`\r\n- To include only specific attributes of related objects: `include=author.name,comments.text`",
						"in": "query",
						"name": "include",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}/{session}/pit-stops": {
			"get": {
				"operationId": "GetSessionPitStops",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/PitStopDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get info about all the pit stops in this session",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}/{session}/laps": {
			"get": {
				"operationId": "GetSessionLaps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/LapTimeDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get info about all the laps in this session",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					}
				]
			}
		},
		"/sessions/{season}/{round}/{session}/fastest-lap": {
			"get": {
				"operationId": "GetSessionFastestLap",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LapTimeDTO"
								}
							}
						}
					}
				},
				"description": "Get info about the fastest lap of this session",
				"tags": [
					"Sessions"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "season",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "round",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "session",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/grands-prix": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PageMetadata"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/GrandsPrixDTO"
													},
													"type": "array"
												}
											},
											"required": [
												"data"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get grands prix based on some optional filters. The results will be returned paginated",
				"tags": [
					"Grands Prix"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page to retrieve, starting at 0",
						"in": "query",
						"name": "pageNo",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer",
							"minimum": 0
						}
					},
					{
						"description": "Size of the page to retrieve",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer",
							"minimum": 1
						}
					},
					{
						"description": "Filter drivers by its full name",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter drivers by its nationality",
						"in": "query",
						"name": "countryId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/grands-prix/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GrandsPrixDTO"
								}
							}
						}
					},
					"4XX": {
						"description": "Client error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JsonApiError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Get a grandPrix by its ID",
				"tags": [
					"Grands Prix"
				],
				"security": [],
				"parameters": [
					{
						"description": "The ID of the grandPrix to get",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/api"
		}
	]
}